import React from "react";
export interface MendableSearchStyle {
    darkMode: boolean;
    accentColor: string;
}
export interface MendableInPlaceProps {
    anon_key: string;
    style?: MendableSearchStyle;
    hintText?: string;
    showSimpleSearch?: boolean;
    welcomeMessage?: string;
    botIcon?: JSX.Element | React.ReactNode | string | undefined;
    userIcon?: JSX.Element | React.ReactNode | undefined;
    messageSettings?: MessageSettings;
    testing_id?: string;
    aiName?: string;
    context?: string;
}
export interface MendableSearchProps {
    anon_key: string;
    customSearchBar?: JSX.Element | undefined;
    floatingButtonEnabled?: boolean;
    style?: MendableSearchStyle;
    welcomeMessage?: string;
    hintText: string;
    openState?: boolean;
    setOpenState?: (openState: boolean) => void;
    showSimpleSearch?: boolean;
    botIcon?: JSX.Element | React.ReactNode | string | undefined;
    userIcon?: JSX.Element | React.ReactNode | undefined;
    dialogCustomStyle?: DialogCustomStyle;
    messageSettings?: MessageSettings;
    _shouldStream?: boolean;
    testing_id?: string;
    isPinnable?: boolean;
    _setIsPinned?: () => void;
    _isPinned?: boolean;
    aiName?: string;
    context?: string;
}
export interface MendableSidebarProps {
    anon_key: string;
    customSearchBar?: JSX.Element | undefined;
    floatingButtonEnabled?: boolean;
    style?: MendableSearchStyle;
    welcomeMessage?: string;
    hintText: string;
    openState?: boolean;
    historyState: any;
    setHistory: (historyState: any) => void;
    setOpenState: (openState: boolean) => void;
    showSimpleSearch?: boolean;
    botIcon?: JSX.Element | React.ReactNode | string | undefined;
    userIcon?: JSX.Element | React.ReactNode | undefined;
    dialogCustomStyle?: DialogCustomStyle;
    messageSettings?: MessageSettings;
    _shouldStream?: boolean;
    testing_id?: string;
    _setIsPinned?: () => void;
    _isPinned?: boolean;
    aiName?: string;
    context?: string;
}
export interface DialogCustomStyle {
    dialogTopMargin?: string;
}
export interface SearchBarProps {
    anon_key: string;
    language?: string;
    placeholder?: string;
    welcomeMessage?: string;
    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    style?: MendableSearchStyle;
    botIcon?: JSX.Element | React.ReactNode | string | undefined;
    userIcon?: JSX.Element | React.ReactNode | undefined;
    cmdShortcutKey?: string;
    dialogPlaceholder?: string;
    showSimpleSearch?: boolean;
    dialogCustomStyle?: DialogCustomStyle;
    messageSettings?: MessageSettings;
    _js?: boolean;
    _shouldStream?: boolean;
    testing_id?: string;
    aiName?: string;
    context?: string;
    isPinnable?: boolean;
}
export interface FloatingButtonProps {
    anon_key: string;
    style?: MendableSearchStyle;
    icon?: JSX.Element | React.ReactNode | string | undefined;
    floatingButtonStyle?: FloatingButtonStyle;
    cmdShortcutKey?: string;
    showSimpleSearch?: boolean;
    welcomeMessage?: string;
    dialogPlaceholder?: string;
    botIcon?: JSX.Element | React.ReactNode | string | undefined;
    userIcon?: JSX.Element | React.ReactNode | undefined;
    positionOverwriteClassname?: string;
    dialogCustomStyle?: DialogCustomStyle;
    customText?: string;
    messageSettings?: MessageSettings;
    language?: string;
    _js?: boolean;
    _shouldStream?: boolean;
    testing_id?: string;
    aiName?: string;
    context?: string;
}
export interface MendableChatBubbleProps {
    anon_key: string;
    style?: MendableSearchStyle;
    icon?: JSX.Element | React.ReactNode | string | undefined;
    floatingButtonStyle?: FloatingButtonStyle;
    cmdShortcutKey?: string;
    showSimpleSearch?: boolean;
    welcomeMessage?: string;
    dialogPlaceholder?: string;
    botIcon?: JSX.Element | React.ReactNode | string | undefined;
    userIcon?: JSX.Element | React.ReactNode | undefined;
    positionOverwriteClassname?: string;
    dialogCustomStyle?: DialogCustomStyle;
    customText?: string;
    messageSettings?: MessageSettings;
    language?: string;
    _js?: boolean;
    _shouldStream?: boolean;
    testing_id?: string;
    aiName?: string;
    context?: string;
}
export interface MessageSettings {
    openSourcesInNewTab?: boolean;
    prettySources?: boolean;
    persistMessagesBetweenSessions?: boolean;
    scrollToView?: boolean;
}
export interface CustomSearchBarProps {
    toggledOn: boolean;
    onClick: () => void;
}
export interface FloatingButtonStyle {
    color: string;
    backgroundColor: string;
}
export declare const DefaultStyle: MendableSearchStyle;
export declare const DefaultFloatingButtonStyle: FloatingButtonStyle;
export declare const DefaultLightStyle: MendableSearchStyle;
export declare const DefaultLightFloatingButtonStyle: FloatingButtonStyle;
export declare const DefaultMessageSettings: MessageSettings;
export interface Company {
    company_id: number;
    display_name: string;
    name: string;
    is_white_label: boolean;
}
export interface Project {
    id: number;
    created_at: string;
    name: string;
    company_id: number;
    support_url: string;
}
export interface Conversation {
    conversation_id: number;
    start_time: string;
    end_time: string | null;
    message_count: number;
    project_id: number;
}
export declare enum Alert {
    NoDocs = "noDocs",
    FullDocs = "fullDocs",
    None = "none",
    Error = "error"
}
export type PinToggleButtonProps = {
    isPinned: boolean;
    setPinState: () => void;
    style?: MendableSearchStyle;
};
